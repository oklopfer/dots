# Forked: https://github.com/chick2d/neofetch-themes
# Credit: https://stackoverflow.com/a/28938235/13449010
# Credit: https://github.com/romkatv/powerlevel10k/blob/master/internal/icons.zsh
# Configuration made by oklopfer

# See this wiki page for more info: 
# https://github.com/dylanaraps/neofetch/wiki/Customizing-Info

get_arch() {
    arch="$(uname -m)"
}

print_info() {
    info title
    prin "${c4}┌────────────────────────────────────────┐${NC}"
    info " ​ ​ $(distro_icon) " distro
    info " ​ ​ $(kernel_icon) " kernel
    info " ​ ​ $(model_icon) " model
    info " ​ ​ 󰍛 " arch
    info " ​ ​  " cpu
    info " ​ ​ 󰢮 " gpu
    info " ​ ​ 󰑭 " memory
    info " ​ ​  " disk
#    info " ​ ​   " gpu_driver  # Linux/macOS only
#    info " ​ ​  " cpu_usage
#    info " ​ ​ 󰂄 " battery
    prin "${c4}├────────────────────────────────────────┤${NC}"
#    info " ​ ​  " users
    info " ​ ​ 󰏗 " packages
    info " ​ ​  " shell
    info " ​ ​  " term
    info " ​ ​  " term_font
#    info " ​ ​ │  " font
    info " ​ ​  " de
    info " ​ ​  " wm
    info " ​ ​  󰉼 " theme
    info " ​ ​  󰀻 " icons
    info " ​ ​ 󰍹 " resolution
    info " ​ ​  󰅐 " uptime
#    info " ​ ​ 󰝚 " song
    # [[ "$player" ]] && prin "Music Player" "$player"
#    info " ​ ​   " local_ip
#    info " ​ ​   " public_ip
#    info " ​ ​   " locale  # This only works on glibc systems.
    info cols
    prin "${c4}├────────────────────────────────────────┤${NC}"
    prin "\n \n \n \n \n \n ${BLACK}██ \n ${RED}██ \n ${GREEN}██ \n ${YELLOW}██ \n ${BLUE}██ \n ${PURPLE}██ \n ${CYAN}██ \n ${WHITE}██"
    prin "\n \n \n \n \n \n ${IBlack}██ \n ${IRed}██ \n ${IGreen}██ \n ${IYellow}██ \n ${IBlue}██ \n ${IPurple}██ \n ${ICyan}██ \n ${IWhite}██"
    prin "${c4}└────────────────────────────────────────┘${NC}"
}

kernel_shorthand="off"
distro_shorthand="off"
os_arch="off"
uptime_shorthand="on"
memory_percent="on"
package_managers="on"
shell_path="off"
shell_version="on"
speed_type="bios_limit"
speed_shorthand="on"
cpu_brand="off"
cpu_speed="on"
cpu_cores="logical"
cpu_temp="off"
gpu_brand="off"
gpu_type="all"
refresh_rate="on"
gtk_shorthand="on"
gtk2="on"
gtk3="on"
public_ip_host="http://ident.me"
public_ip_timeout=2
disk_show=('/')
disk_subtitle="none"
music_player="vlc"
song_format="%artist% - %title%"
song_shorthand="off"
colors=(distro)
bold="on"
underline_enabled="on"
underline_char="-"
separator="  "
color_blocks="off"
block_range=(0 15) # Colorblocks

# Colors for custom colorblocks
export BOLD='\033[1m'
export NC='\033[0m'

if [[ -z $NO_COLOR ]]; then
    # Regular Colors
    export BLACK='\033[0;30m'  # Black
    export RED='\033[0;31m'    # Red
    export GREEN='\033[0;32m'  # Green
    export YELLOW='\033[0;33m' # Yellow
    export BLUE='\033[0;34m'   # Blue
    export PURPLE='\033[0;35m' # Purple
    export CYAN='\033[0;36m'   # Cyan
    export WHITE='\033[0;37m'  # White

    # Bold
    export BBlack='\033[1;30m'  # Black
    export BRed='\033[1;31m'    # Red
    export BGreen='\033[1;32m'  # Green
    export BYellow='\033[1;33m' # Yellow
    export BBlue='\033[1;34m'   # Blue
    export BPurple='\033[1;35m' # Purple
    export BCyan='\033[1;36m'   # Cyan
    export BWhite='\033[1;37m'  # White

    # Underline
    export UBlack='\033[4;30m'  # Black
    export URed='\033[4;31m'    # Red
    export UGreen='\033[4;32m'  # Green
    export UYellow='\033[4;33m' # Yellow
    export UBlue='\033[4;34m'   # Blue
    export UPurple='\033[4;35m' # Purple
    export UCyan='\033[4;36m'   # Cyan
    export UWhite='\033[4;37m'  # White

    # Background
    export On_Black='\033[40m'  # Black
    export On_Red='\033[41m'    # Red
    export On_Green='\033[42m'  # Green
    export On_Yellow='\033[43m' # Yellow
    export On_Blue='\033[44m'   # Blue
    export On_Purple='\033[45m' # Purple
    export On_Cyan='\033[46m'   # Cyan
    export On_White='\033[47m'  # White

    # High Intensity
    export IBlack='\033[0;90m'  # Black
    export IRed='\033[0;91m'    # Red
    export IGreen='\033[0;92m'  # Green
    export IYellow='\033[0;93m' # Yellow
    export IBlue='\033[0;94m'   # Blue
    export IPurple='\033[0;95m' # Purple
    export ICyan='\033[0;96m'   # Cyan
    export IWhite='\033[0;97m'  # White

    # Bold High Intensity
    export BIBlack='\033[1;90m'  # Black
    export BIRed='\033[1;91m'    # Red
    export BIGreen='\033[1;92m'  # Green
    export BIYellow='\033[1;93m' # Yellow
    export BIBlue='\033[1;94m'   # Blue
    export BIPurple='\033[1;95m' # Purple
    export BICyan='\033[1;96m'   # Cyan
    export BIWhite='\033[1;97m'  # White

    # High Intensity backgrounds
    export On_IBlack='\033[0;100m'  # Black
    export On_IRed='\033[0;101m'    # Red
    export On_IGreen='\033[0;102m'  # Green
    export On_IYellow='\033[0;103m' # Yellow
    export On_IBlue='\033[0;104m'   # Blue
    export On_IPurple='\033[0;105m' # Purple
    export On_ICyan='\033[0;106m'   # Cyan
    export On_IWhite='\033[0;107m'  # White
fi

distro_icon() {
    local neouname neouname_o distcon
    neouname="$(uname)"
    [[ $neouname == Linux ]] && neouname_o="$(uname -o 2>/dev/null)"
    if [[ $neouname == Linux && $neouname_o == Android ]]; then
        distcon=""
    else
      case ${neouname} in
        SunOS)                       distcon="";;
        Darwin)                      distcon="";;
        CYGWIN*|MSYS*|MINGW*)        distcon="";;
        FreeBSD|OpenBSD|DragonFly)   distcon="";;
        Linux)
          local os_release_id
          if [[ -r /etc/os-release ]]; then
            os_release_id=$(awk -F= '/^ID=/{print $2}' /etc/os-release)
          elif [[ -e /etc/artix-release ]]; then
            os_release_id=artix
          fi
          case $os_release_id in
            *arch*)                  distcon="";;
            *raspbian*|*debian*)     distcon="";;
            *ubuntu*)                distcon="";;
            *elementary*)            distcon="";;
            *linuxmint*)             distcon="󰣭";;
            *fedora*)                distcon="";;
            *coreos*)                distcon="";;
            *kali*)                  distcon="";;
            *gentoo*)                distcon="";;
            *mageia*)                distcon="";;
            *centos*)                distcon="";;
            *opensuse*|*tumbleweed*) distcon="";;
            *sabayon*)               distcon="";;
            *slackware*)             distcon="";;
            *linuxmint*)             distcon="";;
            *alpine*)                distcon="";;
            *aosc*)                  distcon="";;
            *nixos*)                 distcon="";;
            *devuan*)                distcon="";;
            *manjaro*)               distcon="";;
            *void*)                  distcon="";;
            *artix*)                 distcon="";;
            *rhel*)                  distcon="󱄛";;
            amzn)                    distcon="";;
            endeavouros)             distcon="";;
            rocky)                   distcon="";;
            guix)                    distcon="";;
            *)                       distcon="";;
          esac
          ;;
      esac
    fi
    echo -e "${distcon}"
}

model_icon() {
    local modcon
    if [[ "$(awk -F '\\s*: | @' '/model name|Hardware|Processor|^cpu model|chip type|^cpu type/ {cpu=$2; if ($1 == "Hardware") exit } END { print cpu }' "/proc/cpuinfo")" == "BCM2835" ]]; then
        modcon=""
    else
        modcon="󰌢"
    fi
    echo -e "${modcon}"
}

kernel_icon() {
    local kercon
    if [[ -f /.dockerenv ]]; then
        kercon="󰡨"
    elif [[ $(uname) == "Darwin" ]]; then
        kercon="󰀶"
    else
        kercon=""
    fi
    echo -e "${kercon}"
}

block_width=4
block_height=1

bar_char_elapsed="-"
bar_char_total="="
bar_border="on"
bar_length=15
bar_color_elapsed="distro"
bar_color_total="distro"

cpu_display="on"
memory_display="on"
battery_display="on"
disk_display="on"

image_backend="ascii"
#image_source="$HOME/"
image_size="auto"
image_loop="off"

aascii_distro="auto"
ascii_colors=(distro)
ascii_bold="on"

thumbnail_dir="${XDG_CACHE_HOME:-${HOME}/.cache}/thumbnails/neofetch"
crop_mode="normal"
crop_offset="center"

gap=2

yoffset=0
xoffset=0

stdout="off"